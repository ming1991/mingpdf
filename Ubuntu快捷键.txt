
1.
	Ubuntu通用基础教程
	http://blog.csdn.net/top_worker/article/details/45918399

1.格式约定
	使用 [] 表示可选项，实际输入为方括号中的内容，例如
	ls [-al]
	ls是必须的，参数不需要以方括号括起来。
	使用 <> 表示必需项，实际输入为尖括号中的内容
	使用 | 表示 或 ，以 | 分隔的项目不能同时使用，例如
	tar [-z|j c|x vf] <归档文件> [源文件]
	参数通常紧跟命令名，除非必要，在命令格式中，我们通常省略它们

2.路径
	. 表示当前目录
	.. 表示当前目录的上一级目录。
	./表示当前目录下的某个文件或文件夹，视后面跟着的名字而定
	../表示当前目录上一级目录的文件或文件夹，视后面跟着的名字而定。


3.命令 //终端常常被称为命令行或者 shell
	Linux是大小写敏感的系统，所有的命令、路径、参数、变量……都区分大小写
使用 TAB 键补全命令，无论任何时候，多按几次TAB总会有所帮助
Shell的功能键能够协助您更高效的编辑命令
	
	欲使用 "root" 终端，请在命令行里输入“sudo -i”
	
	你可以使用 man [命令]来查看各个命令的使用文档，如 ：man cp

	cd (change directory)        更改目录。
	pwd (print working directory)显示当前路径。
	ls (list)                    显示当前目录中的文件列表。
	cd /etc             进入“/etc”目录，这里使用的是绝对路径
	pwd                 显示当前路径，这个命令返回结果“/etc”
	cd init.d           进入“/etc”目录的子目录“init.d”，这里使用的是相对路径
	cd ..               进入上一级目录“/etc”
	cd ../home 	    	“/etc”目录的上一级目录为“/”，它的子目录“home”为“/home”
	cd -                回到上一次的目录，我们在“/etc”目录跳转到“/home”目录，所以这次是回到“/etc”目录
	cd ~                “~”代表当前用户的“$HOME”目录，也就是“/home/{用户名}”目录。
	ls                  在任何时候，您都可以使用“ls”命令，来了解当前目录下都有哪些文件。
	ls -a    	    	查看所有文件的文件列表（包括隐藏文件
						(Linux下，名称中第一个字符为 . 的文件或者文件夹，系统默认情况下将它们隐藏起来)
	ls -l 		    	查看详细信息格式的文件列表
			  		    (drwxr-xr-x,第一组只有一个字符：d 文件夹,- 普通文件,l 链接,b 块设备文件,c 字符设备文件。剩下的3组分别为归属用户、归属群组、其它用户或群组对于该文件的权限。我们看它的格式,rwx rwx rwx,r 可读,w 可写,x 可执行.它们的顺便不能颠倒，某一位置为空(-)，则表示不具有相应的权限。)
	Ctrl+a 				组合键，我们发现光标移动到了行首
	Ctrl+f 				向前移动光标，
	Ctrl+b 				向后移动光标， 
	Ctrl+e 				将光标移动到行末
	Ctrl+c 				来强行中止正在运行的程序
	Ctrl+d 				注销root用户权限
	clear				消除屏幕

	apt-get update          更新软件信息数据库
	apt-get upgrade         进行系统升级

4.执行命令的身份
	默认情况下，您的命令提示符末位为 $ ，这表示您将以普通用户的身份执行命令。
您可以使用 su （switch user）这个命令来切换其它用户。
例如 su root ，切换到root用户，如果 su 命令后面没有切换目标，那么这个命令默认切换到root用户。
现在您执行 su 这个命令，系统会提示您输入密码，请输入管理员的密码。这个时候，您会发现命令提示符末位变成了 # ，您将以root用户的身份执行命令。
Ubuntu系统默认会随机设定系统的root密码，这样会更安全一些，这个时候您可以执行“sudo”命令，输入当前用户密码后，暂时以root 用户的身份执行命令。（前提是sudoer列表中要包含您的ID。您在安装Ubuntu系统时创建的用户，默认具有“sudo”权限）

5.通配符
	使用 ? 代表任意单个字符。例如 ???lo ，表示 lo 前有三个字符，它可以匹配 Hello
	使用 * 代表随意几个任意字符。例如 *.iso ，代表所有iso格式的文件。

6.任务管理
	&
	在命令的末尾加上一个 & 符号，表示背景任务，例如：
	wget http://www.download.net/xxx/mp3 &
	;
	使用 ; 将多个命令连结起来，则表示任务按顺序执行

	&&
	使用 && 将多个命令连结起来，则表示只有前面的命令执行成功，后面的命令才能得以执行


7.管道、重定向
	>
	重定向符号，它的作用是将命令的输出重定向到一个文件中。比如我们想把命令 ls 的结果保存为 FileList 文件，作一个清单，我们可以使用重定向符号来完成它：
	ls -l > FileList

	>>
	作用与 > 基本相同，不同点在于， >> 以追加的方式，将命令的输出写入文件的末尾。

	<
	是从文件到命令的重定向，将文件的内容作为命令的输入。

	|
	为管道符号，它的作用是将前一个命令的输出，作为下一个命令的输入。假设一个目录下的文件太多，使用 ls 命令不能够在屏幕中完全显示，这个时候您可以将 ls 命令的输出，通过管道符号，作为浏览器 less 的输入。就可以使用浏览器的功能翻页、查找：
	ls -al | less


8.设定命令的搜索路径
	使用 echo $PATH ，可以显示 $PATH 变量，输出如下：
	/home/ming1991/bin:/home/ming1991/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
	它是一个环境变量，代表执行命令时，Shell的搜索路径。
执行一个命令时，Shell会到 $PATH 变量定义的路径去搜索，并运行与命令同名的可执行文件。如果程序、脚本等可执行文件并不在上面的路径中，就必须使用绝对路径或者相对路径定位可执行文件。

	可以修改 /etc/environment 文件来设定您的命令搜索路径，找到 PATH 起始的行
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin"
在双引号中添加您的自定义路径，并以 : 分隔。

9.软件安装
	1.DPKG
		deb软件包命令遵行如下约定：soft_ver-rev_arch.deb
		soft软件包名称,ver软件版本号,rev: Ubuntu修订版本号,arch目标架构名称
		例如： azureus_2.4.0.2-0ubuntu2_all.deb
		
		您需要使用 dpkg 命令来管理deb软件包：
		dpkg -i | --install xxx.deb   安装deb软件包
		dpkg -r | --remove xxx.deb    删除软件包
		dpkg -r -P | --purge xxx.deb  连同配置文件一起删除
		dpkg -I | -info xxx.deb       查看软件包信息
		dpkg -L xxx.deb               查看包内文件
		dpkg -l                       查看系统中已安装软件包信息
		dpkg-reconfigure xxx          重新配置软件包
		有些时候，您使用 dpkg 安装一个软件包，系统会提示您该软件包依赖其它软件包。这时，您先安装其它软件包，直到满足依赖关系为止。或者同时安装多个软件包
		dpkg -i aaa.deb bbb.deb ccc.deb


	2.apt
		如果一个软件依赖关系过于复杂，使用 dpkg 来安装它，并不是一个明智的选择，这个时候您就需要用到APT软件包管理系统。APT可以自动的检查依赖关系，通过您预设的方式来获得相关软件包，并自动安装配置它。事实上，在多数情况下，我们推荐您使用APT软件包管理系统。
		APT系统主要包括 apt-get 和 apt-cache 等命令。通常是复合命令，包含若干个子命令。
		apt-get install xxx     安装xxx
				-d 仅下载
				-f 强制安装
		apt-get remove xxx      卸载xxx
		apt-get update          更新软件信息数据库
		apt-get upgrade         进行系统升级
		apt-cache search        搜索软件包

		Tip：建议您经常使用 sudo apt-get update 命令来更新您的软件信息数据库
		APT系统修复
		由于各种意外，APT系统可能会出现问题，使用如下命令，尝试进行修复：
		apt-get -f install


	3.源码包
		对于绝大多数软件，我们建议您使用APT系统来安装它。在少数情况下，例如某软件没有以deb包的格式发布，或者需要定制适合自己的软件，您可以通过编译源代码的方式安装它。
首先需要下载软件的源码包，并且将它解包为一些源代码文件。并了便于管理，建议将下载的源码包移动到 /usr/local/src/ 目录下，并在这里解包。
		sudo mv xxx.tar.gz /usr/local/src       移动源码包
		cd /usr/local/src                       进入“/usr/local/src/”目录
		sudo tar -xzvf xxx.tar.gz               解包源码
		cd xxx_ver/                             进行解包后的源码目录


10.export <变量名称>
	将变量导出为环境变量，常写变量赋值一同使用，例如：
	export PATH="$PATH:xxx"
	其中 $PATH 表示变量 PATH 原值


11.ubuntu下如何用gedit编辑etc，usr等目录下的文件
	在不熟悉iv的用户可以使用下面的命令，以图形化的方式编辑文件:
如想修改/etc/lightdm/ligthdm.conf文件，则打开你的terminal，输入sudo gedit /etc/lightdm/ligthdm.conf 即可


12.系统管理一些细节
	命令由 命令名 、 分隔符 、 参数 、 操作对象 构成

	命令名
	标识命令的功能，例如cp(copy)、mv(move)、rm(remove)……
	有些命令包含一些子命令，您可以认为它的命令名由两个单词构成，例如“apt”软件包管理系统：
	apt-get install             安装一个软件
	apt-get remove              删除一个软件

	分隔符
	通常为空格，多个连续的空格视为一个空格，下面两个命令相同：
	cp a b
	cp     a     b
	有一些特殊符号也属于分隔符，例如管道 | 、重定向 > 、 >> 、 < 、后台运行 & 、序列执行 && 、 ; 。使用这些符号时，您不需要再使用空格作为分隔符，例如：
	ls -al|less
	写为以下形式，是为了让您更容易的阅读它：
	ls -al | less

	参数
	精细调节命令的行为，以 - 引导，通常为参数名的首字母。许多软件都可以使用 -h 参数来阅读使用说明，例如：
	apt-get -h
	也可以使用参数的全名，一般以 -- 引导，例如：
	apt-get --help
	多数命令中，使用 - 引导多个字符，将会被视为多个参数，例如：
	apt-get -help
	系统会解读为以下命令
	apt-get -h -e -l -p
	少数命令的参数，不需要以 - 引导，或者使用 - 引导参数全名，例如：
	ps aux
	/etc/init.d/gdm start
	mplayer -loop xxx
	需要对多个对象进行操作时，可以使用空格分隔符将它们隔开：
	touch 1 2 3 4 5 6
	使用空格分隔的多个对象，视为一个整体，作为命令的一个操作对象：
	mv 1 2 3 4 5 6 /home/
	这个命令把“1 2 3 4 5 6”作为一个操作对象，移动到另一个操作对象，“/home/”目录


13.文件管理一些细节
	//ls [路径]
	显示当前目录文件列表
	--color 不同属性以不同颜色显示（默认参数）
	-a 全部显示
	-i 显示inode值
	-l 详细信息
	-F 显示文件类型后缀 目录/ 链接@ 可执行文件* 端口文件= 管道文件| >
	-A 显示隐藏文件
	-R 递归显示子目录文件列表
	-S 按文件大小排序
	-t 按修改时间排序
	-u 按访问时间排序
	-d 只显示目录，不递归显示目录下的文件

	//cd [目录路径] | [特殊路径]
	切换目录
	目录路径可以使用绝对路径或者相对路径 特殊路径：
	~ $HOME目录（默认值）
	- 上一次目录
	.. 上一级目录
	. 当前目录
	Tip:您可以通过修改 /etc/environment 文件，来定义 $CDPATH 变量，设定“cd”命令的搜索路径。

	//pwd
	显示当前路径

	//file <文件名>
	显示文件类型
	-i 显示mime类型

	//du [路径]
	计算文件或目录空间占用
	-h 人性化显示。自动以G、M、K为单位显示占用空间大小
	-l 重复计算硬链接文件大小
	-L 计算符号链接文件大小
	-a 显示当前目录子目录中的文件

	//less <文件名>
	浏览文件，使用VI和Emacs两种风格的键绑定。以下为VI风格键绑定
	Ctrl+f(orward)    向下翻一页    Ctrl+d(own)   向下翻半页 Ctrl+b(ackward)   向上翻一页    Ctrl+u(p)     向上翻半页 /                 查找          q(uit)   退出

	//touch <目标文件>
	触碰，在不修改文件的前提下，更改其时间属性。通常用来创建一个空文件

	//mkdir <文件夹>
	创建文件夹
	-p <多级目录> 按路径创建多级目录
	-m <数字权限值> 设定权限

	//cp <源文件> <目标目录|文件>
	将源文件复制为目录文件，或者将源文件复制到目标目录。多个源文件使用空格分隔
	cp <源目录> <目标目录>
	将源目录复制到目标目录中，如果复制多个源目录，需要使用 -R 参数
	-a 相当于-dpr参数
	-d 保留链接
	-f 强制复制，覆盖目标文件
	-i 覆盖时询问用户
	-p 保留修改时间和访问权限
	-r -R 递归复制（目录=>目录）
	-l 创建链接
	-v 显示过程

	//rm <目标目录|文件>
	删除
	-r -R 递归删除
	-f 强制删除（无需确认，直接删除。慎用！）
	-i 交互式删除（询问用户）

	//rmdir <目标目录>
	删除目录时，建议您使用“rm -r”命令
	mv <源文件> <目标目录|文件>
	相当于cp后删除源文件，也可以作为“重命名”使用。

	//mv <源目录> <目标目录>
	-r -R 递归

	//ln <源文件> <链接>
	链接
	-s 符号链接
	-f 强制链接，覆盖目标文件
	-i 覆盖前询问用户



---------------------------------------------------------------------------

2.
Ubuntu桌面入门指南
https://wiki.ubuntu.com.cn/Ubuntu%E6%A1%8C%E9%9D%A2%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97

1.目录和文件系统
	Linux 和 Unix 文件系统被组织成一个有层次的树形结构。文件系统的最上层是 /，或称为 根目录。在 Unix 和 Linux 的设计理念中，一切皆为文件——包括硬盘、分区和可插拔介质。这就意味着所有其它文件和目录（包括其它硬盘和分区）都位于根目录中。 例如：/home/jebediah/cheeses.odt 给出了正确的完整路径，它指向 cheeses.odt 文件，而该文件位于 jebediah 目录下，该目录又位于 home 目录，最后，home 目录又位于根(/) 目录下。 在根 (/) 目录下，有一组重要的系统目录，在大部分 Linux 发行版里都通用。直接位于根 (/) 目录下的常见目录列表如下：
	/bin - 重要的二进制 (binary) 应用程序
	/boot - 启动 (boot) 配置文件
	/dev - 设备 (device) 文件
	/etc - 配置文件、启动脚本等 (etc)
	/home - 本地用户主 (home) 目录
	/lib - 系统库 (libraries) 文件
	/lost+found - 在根 (/) 目录下提供一个遗失+查找(lost+found) 系统
	/media - 挂载可移动介质 (media)，诸如 CD、数码相机等
	/mnt - 挂载 (mounted) 文件系统
	/opt - 提供一个供可选的 (optional) 应用程序安装目录
	/proc - 特殊的动态目录，用以维护系统信息和状态，包括当前运行中进程 (processes) 信息。
	/root - root (root) 用户主文件夹，读作“slash-root”
	/sbin - 重要的系统二进制 (system binaries) 文件
	/sys - 系统 (system) 文件
	/tmp - 临时(temporary)文件
	/usr - 包含绝大部分所有用户(users)都能访问的应用程序和文件
	/var - 经常变化的(variable)文件，诸如日志或数据库等


2.root 用户和 sudo 命令
	一些 sudo 使用技巧：
	欲使用 "root" 终端，请在命令行里输入“sudo -i”。
	Ubuntu 里所有图形界面配置工具（启动时）默认已使用sudo，因此如有必要它们会提示您输入自己的密码。
	关于 sudo 程序及 Ubuntu 里为何默认没有 root 用户的更多信息，请阅读 Ubuntu wiki 上的 sudo页面。


------------------------------------------------------------------------

3.
linux教程
http://www.runoob.com/linux/linux-intro.html


1.Linux vi/vim
	所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。
但是目前我们使用比较多的是 vim 编辑器。
	
	//vi/vim 的使用
	基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），插入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：
	命令模式：
	用户刚刚启动 vi/vim，便进入了命令模式。
	此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。
	以下是常用的几个命令：
	i 切换到插入模式，以输入字符。
	x 删除当前光标所在处的字符。
	: 切换到底线命令模式，以在最底一行输入命令。
	若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。
	命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。

	//输入模式
	在命令模式下按下i就进入了输入模式。
	在输入模式中，可以使用以下按键：
	字符按键以及Shift组合，输入字符
	ENTER，回车键，换行
	BACK SPACE，退格键，删除光标前一个字符
	DEL，删除键，删除光标后一个字符
	方向键，在文本中移动光标
	HOME/END，移动光标到行首/行尾
	Page Up/Page Down，上/下翻页
	Insert，切换光标为输入/替换模式，光标将变成竖线/下划线
	ESC，退出输入模式，切换到命令模式

	//底线命令模式
	在命令模式下按下:（英文冒号）就进入了底线命令模式。
	底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。
	在底线命令模式中，基本的命令有（已经省略了冒号）：
	q 退出程序
	w 保存文件
	按ESC键可随时退出底线命令模式。


2.Shell 教程
	1.第一个shell脚本
		#!/bin/bash
		echo "Hello World !"
	
		#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。
		echo 命令用于向窗口输出文本。
		
		2.运行 Shell 脚本有两种方法：
			将上面的代码保存为 test.sh，并 cd 到相应目录：
			chmod +x ./test.sh  #使脚本具有执行权限
			./test.sh  #执行脚本
			(注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的)


	2.Shell 变量
		1.使用变量
			使用一个定义过的变量，只要在变量名前面加美元符号即可，如：
			your_name="qinjx"
			echo $your_name
			echo ${your_name}
			变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界

		2.删除变量
			使用 unset 命令可以删除变量。语法：
			unset variable_name

		3.Shell 字符串
			双引号
			拼接字符串
			获取字符串长度
			提取子字符串
			查找子字符串
			
		4.Shell 数组
		5.Shell 注释
	
	3.Shell 传递参数
		我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……

		



------------------------------------------------------------------------










